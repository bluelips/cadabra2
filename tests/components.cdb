
# Testing a substitution rule in which an abstract index in the 
# expression is matched against a coordinate in the pattern.
# FIXME: this is not supposed to match!
# {m,n,p}::Indices(values={t,r}).
# {r,t}::Coordinate.
# ex:= A_{m n} + B_{m n};
# rl:= A_{t r} + B_{t r} = 3;
# substitute(ex, rl)

def test01():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate.
    {m,n}::Indices(values={t,r}, position=fixed).
    ex:= A_{m};
    rl:= A_{t} = 3;
    evaluate(ex, rl)
    tst:= \components_{m}( \comma{ \comma{t} = 3  } ) - @(ex);
    collect_components(_)
    assert(tst==0)
    print("Test 01 passed")

test01()

def test02():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate.
    {m,n,p,s}::Indices(values={t,r}, position=free).
    C::Depends(r,t).
    ex:= A_{n m} B_{m n p} ( C_{p s} + D_{s p} );
    rl:= [ A_{r t} = 3, B_{t r t} = 2, B_{t r r} = 5, C_{t r} = 1, D_{r t} = r**2*t, D_{t r}=t**2 ];
    evaluate(ex, rl)
    tst:= \components_{s}{\comma{r}= 6 r**2 t + 6, \comma{t}=15 t**2} - @(ex):
    collect_components(_)
    assert(tst==0)
    print("Test 02 passed")

test02()


# Riemann curvature example.

def test03():
    __cdbkernel__=create_scope()
    {r,t,\phi,\theta}::Coordinate.
    {\mu,\nu,\rho,\sigma,\lambda,\kappa,\gamma,\chi}::Indices(values={t,r,\phi,\theta}, position=fixed).
    \partial{#}::PartialDerivative.
    g_{\mu\nu}::Metric.
    g^{\mu\nu}::InverseMetric.         
    ss:= { g_{t t} = -(1-2 M/r),  g_{r r} = 1/(1-2 M/r),
            g_{\theta\theta} = r**2,  g_{\phi\phi}=r**2 \sin(\theta)**2 };
    complete(ss, $g^{\mu\nu}$)
    ch:= \Gamma^{\mu}_{\nu\rho} = 1/2 g^{\mu\sigma} ( \partial_{\rho}{g_{\nu\sigma}}
                                                +\partial_{\nu}{g_{\rho\sigma}}
                                                -\partial_{\sigma}{g_{\nu\rho}} );
    evaluate(ch, ss, rhsonly=True)
    chtst=rhs(ch)
    # Check against e.g. arxiv:0904.4184.
    tst:=\components^{\mu}_{\nu\rho}{ {t,r,t}          =  M/r**2 (1-2 M/r)**(-1),
                                {t,t,r}            =  M/r**2 (1-2 M/r)**(-1),
                                {r,r,r}            = -M/r**2 (1-2 M/r)**(-1),
                                {r,t,t}            =  M/r**2 (1-2 M/r),
                                {r,\theta,\theta}  = -r (1-2M/r),
                                {r,\phi,\phi}      = - (r-2M) \sin(\theta)**2,
                                {\theta,\theta,r}  = 1/r,
                                {\theta,r,\theta}  = 1/r,
                                {\phi,\phi,r}      = 1/r,
                                {\phi,r,\phi}      = 1/r,
                                {\theta,\phi,\phi} = -\sin(\theta)\cos(\theta),
                                {\phi,\theta,\phi} = \cos(\theta)/\sin(\theta),
                                {\phi,\phi,\theta} = \cos(\theta)/\sin(\theta)
                            } - @(chtst);
    collect_components(_)
    assert(tst==0)
    print("Test 03a passed")
    
    rm:= R^{\rho}_{\sigma\mu\nu} = \partial_{\mu}{\Gamma^{\rho}_{\nu\sigma}}
                              -\partial_{\nu}{\Gamma^{\rho}_{\mu\sigma}}
                              +\Gamma^{\rho}_{\mu\lambda} \Gamma^{\lambda}_{\nu\sigma}
                              -\Gamma^{\rho}_{\nu\lambda} \Gamma^{\lambda}_{\mu\sigma};

    substitute(rm, ch)
    evaluate(rm, ss, rhsonly=True)
    
    # The Ricci tensor should be zero.
    rc:= R_{\sigma\nu} = R^{\rho}_{\sigma\rho\nu};
    substitute(rc, rm)
    evaluate(rc, ss, rhsonly=True)
    assert(rhs(rc)==0)
    print("Test 03b passed")
    
    # Finally, the Kretschmann scalar.
    K:= K = R^{\mu}_{\nu\rho\sigma} R^{\lambda}_{\kappa\gamma\chi} g_{\mu\lambda} g^{\nu\kappa} g^{\rho\gamma} g^{\sigma\chi};
    substitute(K, rm)
    evaluate(K, ss)
    tmp=rhs(K)
    tst:= 48 M**2/r**6 - @(tmp);
    assert(tst==0)
    print("Test 03 passed")
    
test03()
    
def test04():
    __cdbkernel__=create_scope()
    {r,t,\theta,\phi}::Coordinate.
    {m,n,p,q}::Indices(position=fixed,values={t,r,\theta,\phi}).
    rl:= { X^{t} -> X^{t}, g_{t t}=1, g_{r r}=3 };
    ex:= g_{m n} X^{n};
    evaluate(ex, rl)
    tst:= \components_{m}{ \comma{ \comma{t} = X^{t} } } - @(ex);
    collect_components(_)
    assert(tst==0)
    print("Test 04 passed")

test04()

# Component computations leading to a scalar.

def test05():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate.
    {m,n,p}::Indices(values={r,t}).
    ex:= A_{m n}*A_{m n};
    ss:= { A_{r r} -> a+b, A_{r t} -> b, A_{t t} -> c, A_{r r t}->3, A_{t t t}->c };
    evaluate(ex, ss)
    tst:= (a+b)**2+b**2+c**2  - @(ex);
    assert(tst==0)
    print("Test 05 passed")

test05()

# The following test components of tensor outer products. The first one
# leads to a scalar multiplying the components tensor.

def test06():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate.
    {m,n}::Indices(values={t,r}).
    ex:= g_{m n} X^{n} A;
    rl:= { X^{t} -> X^{t}, g_{t t}=1, g_{r r}=3 };
    evaluate(ex,rl)
    tst:= \components_{m}{ \comma{ \comma{t}= A X^{t} } } - @(ex);
    collect_components(_)
    assert(tst==0)
    print("Test 06 passed")

test06()

 
# The second one is manifestly an outer product.

def test07():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate.
    {m,n,p}::Indices(values={t,r}).
    ex:= X^{n} X^{m} X^{p};
    rl:= { X^{t} -> T, X^{r} -> R };
    evaluate(ex,rl)
    tst:=\components^{n m p}{ {t,t,t}=T**3, {t,t,r}=R T**2, {t,r,t}=R T**2,
                            {t,r,r}=T R**2, {r,t,t}=R T**2, {r,t,r}=T R**2,
                            {r,r,t}=R**2 T, {r,r,r}=R**3 } - @(ex);
    collect_components(tst)
    assert(tst==0)
    print("Test 07 passed")

test07()                          

# More GR stuff.
# {\mu,\nu,\rho,\sigma}::Indices(position=fixed).
# \partial{#}::PartialDerivative.
# ex:= R^{\mu}_{\nu\rho\sigma};
# rl:= { R^{\mu}_{\nu\rho\sigma} -> \partial_{\rho}{\Gamma^{\mu}_{\nu\sigma}},
#         \Gamma^{\mu}_{\nu\rho} = 1/2 g^{\mu\sigma} ( \partial_{\rho}{g_{\nu\sigma}}
#                                                  +\partial_{\nu}{g_{\rho\sigma}}
#                                                  -\partial_{\sigma}{g_{\nu\rho}} )
#                                                   };
# substitute(ex, rl, repeat=True);                                                  


# -------------------------------------------

# This one does not yet work, and might be better served with a split-index
# first.
# {r,t,\phi,\theta}::Coordinate.
# {m,n}::Indices("full",values={t,r,\phi,\theta}).
# {i,j}::Indices("3d", parent="full").
# ex:= A_{m n}+A_{n m};
# rl:= { A_{t t} -> 3, A_{i j} -> \delta_{i j} };
# evaluate(ex, rl);

# Self-contracted tensors.

def test08():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate.
    {m,n,p}::Indices(values={r,t})
    ex:= A_{n}^{n} A_{m}^{m};
    rl:= { A_{t}^{r} -> S, A_{t}^{t} -> 3, A_{r}^{r} -> r };
    evaluate(ex, rl)
    tst:= (r+3)**2 - @(ex);
    assert(tst==0)
    print("Test 08 passed")

test08()

def test09():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate.
    {m,n,p}::Indices(values={r,t})
    ex:= A_{m}^{m};
    rl:= { A_{t}^{r} -> S, A_{t}^{t} -> 3, A_{r}^{r} -> r };
    evaluate(ex, rl)
    tst:= r+3 - @(ex);
    assert(tst==0)
    print("Test 09 passed")

test09()

def test10():
    __cdbkernel__=create_scope()
    {r,t,\phi}::Coordinate.
    {m,n,p}::Indices(values={r,t,\phi}).
    ex:= A_{n}^{n p} B_{p};
    rl:= A_{r}^{r t} -> a, A_{r}^{r r} -> b, A_{r}^{t t} -> Q1, A_{t}^{r t} -> Q2, A_{t}^{r r} -> Q3,
         A_{t}^{t t}-> c, A_{t}^{t r} -> d, B_{r} -> Br, B_{t} -> Bt;
    evaluate(ex, rl)
    tst:= a Bt + c Bt + b Br + d Br - @(ex);
    assert(sympy.simplify(tst)==0)
    print("Test 10 passed")

test10()

# This does not work when 'Q' is removed.
def test11():
    __cdbkernel__=create_scope()
    {r,t,\phi}::Coordinate;
    {m,n,p}::Indices(values={r,t,\phi});
    ex:= T_{m n} = Q A_{m n};
    rl:= A_{r r} -> r, A_{t t} -> t, A_{r t} -> t r;
    evaluate(ex, rl, rhsonly=True)
    ex2:= T_{m m};
    substitute(ex2, ex)
    evaluate(ex2, rl)
    tst:= Q (r+t) - @(ex2);
    assert(tst==0)
    print("Test 11 passed")

test11()

def test12():
    __cdbkernel__=create_scope()
    {\mu,\nu,\rho,\sigma}::Indices(values={0,1,2,3});
    ex:=A_{\mu} A_{\mu};
    rl:= A_{0} -> -\xi_{0}, A_{1} -> \xi_{1}, A_{2} -> -\xi_{2}, A_{3} -> \xi_{3};
    evaluate(ex, rl)
    tst:= \xi_{0}**2 + \xi_{1}**2 + \xi_{2}**2 + \xi_{3}**2 - @(ex);
    assert(tst==0)
    print("Test 12 passed")

test12()

def test13():
    __cdbkernel__=create_scope()
    {i,j,k}::Indices;
    {i,j,k}::Integer(1..3);
    \epsilon^{i j k}::EpsilonTensor;
    ex:=\epsilon^{i j k};
    evaluate(ex, $$);
    # Not finished  


def test14():        
    __cdbkernel__=create_scope()
    {t,x,y,z}::Coordinate;        
    {\mu,\nu,\rho,\sigma}::Indices(values={t,x,y,z});
    f::Depends({t,x,y,z});
    \partial{#}::PartialDerivative;
    ex:= F^{\mu} \partial_{\mu}{ f };
    rl:= F^{t} = A, F^{x} = B, F^{z} = C;
    evaluate(ex, rl)
    canonicalise(ex)
    tst:= A \partial_{t}{f} + B \partial_{x}{f} + C \partial_{z}{f} - @(ex);
    assert(tst==0)
    print("Test 14 passed")

test14()

def test15():        
    __cdbkernel__=create_scope()
    {t,x,y,z}::Coordinate;        
    {\mu,\nu,\rho,\sigma}::Indices(values={t,x,y,z});
    f::Depends({t,x,y,z});
    \partial{#}::PartialDerivative;
    ex:= F^{\mu\nu} \partial_{\mu \nu}{ f };
    rl:= F^{t x} = A, F^{x y} = B, F^{z x} = C;
    evaluate(ex, rl)
    canonicalise(ex)
    tst:= A \partial_{t x}{f} + B \partial_{x y}{f} + C \partial_{x z}{f} - @(ex);
    assert(tst==0)
    print("Test 15 passed")

test15()

def test16():        
    __cdbkernel__=create_scope()
    {x,y,z}::Coordinate;
    f::Depends({x,y,z});
    \partial{#}::PartialDerivative;
    {i,j,k,l}::Indices(values={x,y,z}, position=free);
    ex:= 2 \partial_{i i}{3 f} + m**2 f;
    evaluate(ex)
    tst:= 6\partial_{x x}{f} + 6\partial_{y y}{f} + 6\partial_{z z}{f} + m**2 f - @(ex);
    assert(tst==0)
    print("Test 16 passed")

test16()
        
def test17():
    __cdbkernel__=create_scope()
    {x,y,z}::Coordinate;
    {i,j,k,l}::Indices(values={x,y,z}, position=free);
    Ax::Depends(y);
    Ay::Depends(z);
    Az::Depends(x);        
    \partial{#}::PartialDerivative;
    ex:= \partial_{i j}{A_{i}} + m**2 A_{j};
    evaluate(ex, $A_x=Ax, A_y=Ay, A_z=Az$)
    tst:= \components_{j}{ \comma{x}=m**2 Ax, \comma{y}=m**2 Ay, \comma{z}=m**2 Az } - @(ex);
    collect_components(tst)
    assert(tst==0)
    print("Test 17 passed")

test17()

def test18():
    __cdbkernel__=create_scope()
    {x,y,z}::Coordinate;
    {i,j,k,l}::Indices(values={x,y,z}, position=free);
    A_{i}::Depends({x,y,z});
    \partial{#}::PartialDerivative;
    ex:= \partial_{i}{A_{j}};
    evaluate(ex, $A_{z}=z$)
    tst:= \components_{j i}( \comma{ {z,z}=1 } ) - @(ex);
    collect_components(tst)
    assert(tst==0)
    print("Test 18 passed")

test18()

def test19():
    __cdbkernel__=create_scope()
    {x,y,z}::Coordinate;
    {i,j,k,l}::Indices(values={x,y,z}, position=free);
    A_{i}::Depends({x,y,z});
    \partial{#}::PartialDerivative;
    ex:= \partial_{i}{A_{i}} + m**2 f;
    evaluate(ex, $A_{z}=\sin{z}$)
    tst:= m**2 f + \cos{z} - @(ex);
    sort_product(_)
    assert(tst==0)
    print("Test 19 passed")

test19()

# def test20():
# __cdbkernel__=create_scope()
# {a,b,c,d}::Indices(values={0,1,2}, position=fixed);
# {a,b,c,d}::Integer(0..2);
# \Gamma{#}::GammaMatrix(metric=\eta);
# C_{a b c}::AntiSymmetric;
# ex:= C_{a b c} \Gamma^{a b c};
# rl:= [ C_{0 1 2} = \alpha ];
# evaluate(ex, rl);
# tst:= 6 \Gamma^{0 1 2} - @(ex);
# assert(tst)

def test20():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate;
    {a,b,c}::Indices(values={r,t});
    \partial{#}::PartialDerivative;
    ex:= A_{a} / B_{b} C_{a b};
    rl:= [ A_{r} = 1, A_{t} = q, B_{t} = 2, B_{r} = w, C_{r t} = 3, C_{t r}=5 ];
    evaluate(ex, rl)
    tst:= 3/2 + 5 q/w - @(ex);
    assert(tst==0)

test20()

def test21():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate;
    {a,b,c}::Indices(values={r,t});
    \partial{#}::PartialDerivative;
    {f,g}::Depends(r);    
    ex:= A_{a} \partial_{a}{ f / g };
    rl:= { A_{r} = q };
    evaluate(ex, rl)
    tst:= q (- f \partial_{r}{g} + g \partial_{r}{f} )/g**2 - @(ex);
    assert(tst==0)
    print("Test 21 passed")

test21()

def test22():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate;
    {a,b,c}::Indices(values={r,t});
    \partial{#}::PartialDerivative;
    {f,g}::Depends(r);    
    ex:= A_{a} \partial_{a}{ f * g };
    rl:= { A_{r} = q };
    evaluate(ex, rl)
    tst:= q ( f \partial_{r}{g} + g\partial_{r}{f} ) - @(ex);
    assert(tst==0)
    print("Test 22 passed")

test22()

def test23():
    __cdbkernel__=create_scope()
    {r,t}::Coordinate;        
    {a,b,c}::Indices(values={r,t}, position=fixed);
    \partial{#}::PartialDerivative;
    ex:= \partial^{a}{ A_{a} };
    rl:= A_{r} = r;
    try:
        evaluate(ex, rl);
        assert(1==0)
    except:
        print("Test 23a passed")
    ex:= \partial_{a}{ A^{a} };
    rl:= A^{r} = r;
    evaluate(ex, rl)
    tst:= 1 - @(ex);
    assert(tst==0)
    print("Test 23b passed")
        
test23()
        

# 
# {r,t}::Coordinate.    
# {a,b,c}::Indices(values={r,t});
# \partial{#}::PartialDerivative;
# A_{a}::Depends(r);
# ex:= \partial_{a}{ A_{b} };
# rl:= \partial_{r}{ A_{t} } = 1;
# evaluate(ex, rl);

def test24():
    __cdbkernel__=create_scope()
    {\theta, \varphi}::Coordinate;
    {\alpha, \beta, \gamma, \delta, \rho, \sigma, \mu, \nu, \lambda}::Indices(values={\varphi, \theta}, position=fixed);
    \partial{#}::PartialDerivative;
    g_{\alpha\beta}::Metric.
    g^{\alpha\beta}::InverseMetric.

    sphe:={ g_{\theta\theta} = r**2,
        g_{\varphi\varphi} = r**2 \sin(\theta)**2 }.
    complete(sphe, $g^{\alpha\beta}$)

    ch:= \Gamma^{\alpha}_{\mu\nu} = 1/2 g^{\alpha\beta} ( \partial_{\nu}{g_{\beta\mu}}
                                                        +\partial_{\mu}{g_{\beta\nu}}
                                                        -\partial_{\beta}{g_{\mu\nu}} );

    evaluate(ch, sphe, rhsonly=True)

    rm:= R^{\rho}_{\sigma\mu\nu} = +\partial_{\mu}{\Gamma^{\rho}_{\sigma\nu}}
           -\partial_{\nu}{\Gamma^{\rho}_{\sigma\mu}}
           +\Gamma^{\rho}_{\beta\mu} \Gamma^{\beta}_{\sigma\nu}
           -\Gamma^{\rho}_{\beta\nu} \Gamma^{\beta}_{\sigma\mu};

    substitute(rm, ch)
    evaluate(rm, sphe, rhsonly=True)

    ricci:= R_{\sigma\nu} = R^{\rho}_{\sigma\rho\nu};
    substitute(ricci, rm)
    evaluate(ricci, sphe, rhsonly=True)

    R:= R = R_{\sigma\nu} g^{\sigma\nu};
    substitute(R, ricci)
    evaluate(R, sphe, rhsonly=True)
    val = rhs(R)
    tst:= @(val) - 2/r**2;
    assert(tst==0)
    print("Test 24 passed")
        
test24()

# Evaluating with completely unspecified tensors.
#
def test25():        
    __cdbkernel__=create_scope()
    {a,b,c}::Indices(values={0,1,2,3});
    ex:= X^{a} Y_{a};
    rl:= { Y_{0} = 3, Y_{2} = -5 };
    evaluate(ex, rl)
    tst:= 3 X^{0} - 5 X^{2} - @(ex);
    assert(tst==0)
    print("Test 25 passed")

test25()
        
def test26():
    __cdbkernel__=create_scope()
    {a,b,c}::Indices(values={0,1,2});
    ex:= X^{a b} Y_{a b};
    evaluate(ex)
    tst:= X^{0 0} Y_{0 0} + X^{0 1} Y_{0 1} + X^{0 2} Y_{0 2}
        + X^{1 0} Y_{1 0} + X^{1 1} Y_{1 1} + X^{1 2} Y_{1 2}
        + X^{2 0} Y_{2 0} + X^{2 1} Y_{2 1} + X^{2 2} Y_{2 2} - @(ex):
    assert(tst==0)
    print("Test 26 passed")

test26()
